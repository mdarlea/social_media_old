// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Application.SocialMedia.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AddressAppServiceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AddressAppService.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AddressAppService", "\tTest the Address application service", ProgrammingLanguage.CSharp, new string[] {
                        "AddressAppServiceFeature"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "AddressAppService")))
            {
                Application.SocialMedia.Tests.AddressAppServiceFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Associate an existing address with a user")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddressAppService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddressAppServiceFeature")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UseAnExistingAddressForUser")]
        public virtual void AssociateAnExistingAddressWithAUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Associate an existing address with a user", new string[] {
                        "UseAnExistingAddressForUser"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("The user with the \'ef4b2bdb-eda9-4778-bc1c-ab347a4924f5\' id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "StreetAddress",
                        "10023 Belle Rive Blvd."});
            table1.AddRow(new string[] {
                        "SuiteNumber",
                        "Apt. 1204"});
            table1.AddRow(new string[] {
                        "City",
                        "Jacksonville"});
            table1.AddRow(new string[] {
                        "State",
                        "Florida"});
            table1.AddRow(new string[] {
                        "Zip",
                        "32256"});
            table1.AddRow(new string[] {
                        "CountryIsoCode",
                        "us"});
            table1.AddRow(new string[] {
                        "Latitude",
                        "30.210796"});
            table1.AddRow(new string[] {
                        "Longitude",
                        "-81.5489216"});
            table1.AddRow(new string[] {
                        "GeolocationStreetNumber",
                        "10023"});
            table1.AddRow(new string[] {
                        "GeolocationStreet",
                        "Belle Rive Boulevard"});
            table1.AddRow(new string[] {
                        "IsMainAddress",
                        "true"});
#line 8
testRunner.And("the following address:", ((string)(null)), table1, "And ");
#line 21
testRunner.When("I associate this address with the given user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
testRunner.Then("The adress having the id equal with 1 should be associated with the given user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
testRunner.And("the given user should be associated with 1 addresses", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "Status",
                        "Success"});
            table2.AddRow(new string[] {
                        "Id",
                        "1"});
            table2.AddRow(new string[] {
                        "StreetAddress",
                        "10023 Belle Rive Blvd."});
            table2.AddRow(new string[] {
                        "SuiteNumber",
                        "Apt. 1204"});
            table2.AddRow(new string[] {
                        "City",
                        "Jacksonville"});
            table2.AddRow(new string[] {
                        "State",
                        "Florida"});
            table2.AddRow(new string[] {
                        "Zip",
                        "32256"});
            table2.AddRow(new string[] {
                        "CountryIsoCode",
                        "us"});
            table2.AddRow(new string[] {
                        "Latitude",
                        "30.210796"});
            table2.AddRow(new string[] {
                        "Longitude",
                        "-81.5489216"});
            table2.AddRow(new string[] {
                        "GeolocationStreetNumber",
                        "10023"});
            table2.AddRow(new string[] {
                        "GeolocationStreet",
                        "Belle Rive Boulevard"});
            table2.AddRow(new string[] {
                        "IsMainAddress",
                        "true"});
#line 24
testRunner.And("the address application service should return a dto with the following informatio" +
                    "n", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a new address to an existing user")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddressAppService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddressAppServiceFeature")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddNewAddressForUser")]
        public virtual void AddANewAddressToAnExistingUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a new address to an existing user", new string[] {
                        "AddNewAddressForUser"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("The user with the \'ef4b2bdb-eda9-4778-bc1c-ab347a4924f5\' id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "StreetAddress",
                        "Brasov nr.9"});
            table3.AddRow(new string[] {
                        "SuiteNumber",
                        "3"});
            table3.AddRow(new string[] {
                        "City",
                        "Timisoara"});
            table3.AddRow(new string[] {
                        "State",
                        "Timis"});
            table3.AddRow(new string[] {
                        "Zip",
                        "1900"});
            table3.AddRow(new string[] {
                        "CountryIsoCode",
                        "ro"});
            table3.AddRow(new string[] {
                        "Latitude",
                        "45.747699"});
            table3.AddRow(new string[] {
                        "Longitude",
                        "21.222093900000004"});
            table3.AddRow(new string[] {
                        "GeolocationStreetNumber",
                        "9"});
            table3.AddRow(new string[] {
                        "GeolocationStreet",
                        "Brasov"});
            table3.AddRow(new string[] {
                        "IsMainAddress",
                        "true"});
#line 43
 testRunner.And("the following address:", ((string)(null)), table3, "And ");
#line 56
 testRunner.When("I associate this address with the given user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "StreetAddress",
                        "Brasov nr.9"});
            table4.AddRow(new string[] {
                        "SuiteNumber",
                        "3"});
            table4.AddRow(new string[] {
                        "City",
                        "Timisoara"});
            table4.AddRow(new string[] {
                        "State",
                        "Timis"});
            table4.AddRow(new string[] {
                        "Zip",
                        "1900"});
            table4.AddRow(new string[] {
                        "CountryIsoCode",
                        "ro"});
            table4.AddRow(new string[] {
                        "Latitude",
                        "45.747699"});
            table4.AddRow(new string[] {
                        "Longitude",
                        "21.222093900000004"});
            table4.AddRow(new string[] {
                        "GeolocationStreetNumber",
                        "9"});
            table4.AddRow(new string[] {
                        "GeolocationStreet",
                        "Brasov"});
            table4.AddRow(new string[] {
                        "IsMainAddress",
                        "true"});
#line 57
 testRunner.Then("A new address with the information below shoud be added to the database", ((string)(null)), table4, "Then ");
#line 70
 testRunner.And("the id of the new address should not be equal with 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.And("the newly added address should be associated with the given user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.And("the given user should be associated with 2 addresses", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "StreetAddress",
                        "Brasov nr.9"});
            table5.AddRow(new string[] {
                        "SuiteNumber",
                        "3"});
            table5.AddRow(new string[] {
                        "City",
                        "Timisoara"});
            table5.AddRow(new string[] {
                        "State",
                        "Timis"});
            table5.AddRow(new string[] {
                        "Zip",
                        "1900"});
            table5.AddRow(new string[] {
                        "CountryIsoCode",
                        "ro"});
            table5.AddRow(new string[] {
                        "Latitude",
                        "45.747699"});
            table5.AddRow(new string[] {
                        "Longitude",
                        "21.222093900000004"});
            table5.AddRow(new string[] {
                        "GeolocationStreetNumber",
                        "9"});
            table5.AddRow(new string[] {
                        "GeolocationStreet",
                        "Brasov"});
            table5.AddRow(new string[] {
                        "IsMainAddress",
                        "true"});
#line 73
 testRunner.And("the address application service should return a dto with the following informatio" +
                    "n", ((string)(null)), table5, "And ");
#line 86
 testRunner.And("the id of the returned address should be equal with the id of the newly created a" +
                    "ddress", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update an existing address")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddressAppService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddressAppServiceFeature")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UpdateAnExistingAddress")]
        public virtual void UpdateAnExistingAddress()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update an existing address", new string[] {
                        "UpdateAnExistingAddress"});
#line 89
 this.ScenarioSetup(scenarioInfo);
#line 90
 testRunner.Given("the address with the id equal to 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "Id",
                        "3"});
            table6.AddRow(new string[] {
                        "StreetAddress",
                        "480 N Orange Ave"});
            table6.AddRow(new string[] {
                        "City",
                        "Orlando"});
            table6.AddRow(new string[] {
                        "State",
                        "Florida"});
            table6.AddRow(new string[] {
                        "Zip",
                        "32801"});
            table6.AddRow(new string[] {
                        "CountryIsoCode",
                        "us"});
            table6.AddRow(new string[] {
                        "Latitude",
                        "50.210796"});
            table6.AddRow(new string[] {
                        "Longitude",
                        "-42.5489216"});
            table6.AddRow(new string[] {
                        "GeolocationStreetNumber",
                        "480"});
            table6.AddRow(new string[] {
                        "GeolocationStreet",
                        "N Orange Avenue"});
            table6.AddRow(new string[] {
                        "IsMainAddress",
                        "true"});
            table6.AddRow(new string[] {
                        "AddressTypeId",
                        "1"});
#line 91
 testRunner.And("the following address:", ((string)(null)), table6, "And ");
#line 105
 testRunner.When("I update the address with the given new address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
 testRunner.Then("the given address entity should be updated with the information from the given  a" +
                    "ddress dto", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
